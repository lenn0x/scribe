#!/usr/bin/python

##  Copyright (c) 2007-2008 Facebook
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.
##
## See accompanying file LICENSE or visit the Scribe site at:
## http://developers.facebook.com/scribe/


"""
    scribe_cat: A simple script for sending messages to scribe.

    -h host[:port] - Host and optional port, the default port is 1463
    --newline - This parameter will take input and loop reading over stdin

"""

import sys
from scribe import scribe
from thrift.transport import TTransport, TSocket
from thrift.protocol import TBinaryProtocol
from optparse import OptionParser

DEFAULT_SCRIBE_PORT = 1463

usage = "usage: (message is stdin): scribe_cat [-h host[:port]] [--newline] category"
parser = OptionParser(usage=usage, add_help_option=False)
parser.add_option("-h", dest="hostport")
parser.add_option("--newline", dest="newline", default=False)

(options, args) = parser.parse_args()
if len(args) != 1:
    print parser.get_usage().strip()
    sys.exit(1)

category = args[0]

if not options.hostport:
    host = '127.0.0.1'
    port = DEFAULT_SCRIBE_PORT
elif options.hostport:
    host_port = options.hostport.split(':')
    host = host_port[0]
    if len(host_port) > 1:
        port = int(host_port[1])
    else:
        port = DEFAULT_SCRIBE_PORT

socket = TSocket.TSocket(host=host, port=port)
transport = TTransport.TFramedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocolAccelerated(trans=transport, strictRead=False, strictWrite=False)
client = scribe.Client(iprot=protocol, oprot=protocol)
transport.open()

while 1:

    message=sys.stdin.readline()
    if options.newline:
        message=message.rstrip('\r\n')

    if not message:
        break
    log_entry=scribe.LogEntry(dict(category=category, message=message))
    result = client.Log(messages=[log_entry])

    if not options.newline:
        break

transport.close()

if result == scribe.ResultCode.OK:
  sys.exit()
elif result == scribe.ResultCode.TRY_LATER:
  print >> sys.stderr, "TRY_LATER"
  sys.exit(84)  # 'T'
else:
  sys.exit("Unknown error code.")
